diff --git a/node_modules/semantic-release/index.js b/node_modules/semantic-release/index.js
index 67877fb..fbd88a6 100644
--- a/node_modules/semantic-release/index.js
+++ b/node_modules/semantic-release/index.js
@@ -19,6 +19,7 @@ import getLogger from "./lib/get-logger.js";
 import { addNote, getGitHead, getTagHead, isBranchUpToDate, push, pushNotes, tag, verifyAuth } from "./lib/git.js";
 import getError from "./lib/get-error.js";
 import { COMMIT_EMAIL, COMMIT_NAME } from "./lib/definitions/constants.js";
+import { debug } from "node:console";
 
 const require = createRequire(import.meta.url);
 const pkg = require("./package.json");
diff --git a/node_modules/semantic-release/lib/get-config.js b/node_modules/semantic-release/lib/get-config.js
index 429577e..4dee847 100644
--- a/node_modules/semantic-release/lib/get-config.js
+++ b/node_modules/semantic-release/lib/get-config.js
@@ -2,7 +2,7 @@ import { dirname, resolve } from "node:path";
 import { fileURLToPath } from "node:url";
 import { createRequire } from "node:module";
 
-import { castArray, isNil, isPlainObject, isString, pickBy } from "lodash-es";
+import { castArray, defaultsDeep, isNil, isPlainObject, isString, pickBy } from "lodash-es";
 import { readPackageUp } from "read-pkg-up";
 import { cosmiconfig } from "cosmiconfig";
 import resolveFrom from "resolve-from";
@@ -32,33 +32,32 @@ export default async (context, cliOptions) => {
   ({ extends: extendPaths, ...options } = options);
   if (extendPaths) {
     // If `extends` is defined, load and merge each shareable config with `options`
-    options = {
-      ...(await castArray(extendPaths).reduce(async (eventualResult, extendPath) => {
-        const result = await eventualResult;
-        const extendsOptions = require(resolveFrom.silent(__dirname, extendPath) || resolveFrom(cwd, extendPath));
+    const newOptions = (await castArray(extendPaths).reduce(async (eventualResult, extendPath) => {
+      const result = await eventualResult;
+      const extendsOptions = require(resolveFrom.silent(__dirname, extendPath) || resolveFrom(cwd, extendPath));
 
-        // For each plugin defined in a shareable config, save in `pluginsPath` the extendable config path,
-        // so those plugin will be loaded relative to the config file
-        Object.entries(extendsOptions)
-          .filter(([, value]) => Boolean(value))
-          .reduce((pluginsPath, [option, value]) => {
-            castArray(value).forEach((plugin) => {
-              if (option === "plugins" && validatePlugin(plugin)) {
-                pluginsPath[parseConfig(plugin)[0]] = extendPath;
-              } else if (
-                PLUGINS_DEFINITIONS[option] &&
-                (isString(plugin) || (isPlainObject(plugin) && isString(plugin.path)))
-              ) {
-                pluginsPath[isString(plugin) ? plugin : plugin.path] = extendPath;
-              }
-            });
-            return pluginsPath;
-          }, pluginsPath);
+      // For each plugin defined in a shareable config, save in `pluginsPath` the extendable config path,
+      // so those plugin will be loaded relative to the config file
+      Object.entries(extendsOptions)
+        .filter(([, value]) => Boolean(value))
+        .reduce((pluginsPath, [option, value]) => {
+          castArray(value).forEach((plugin) => {
+            if (option === "plugins" && validatePlugin(plugin)) {
+              pluginsPath[parseConfig(plugin)[0]] = extendPath;
+            } else if (
+              PLUGINS_DEFINITIONS[option] &&
+              (isString(plugin) || (isPlainObject(plugin) && isString(plugin.path)))
+            ) {
+              pluginsPath[isString(plugin) ? plugin : plugin.path] = extendPath;
+            }
+          });
+          return pluginsPath;
+        }, pluginsPath);
 
-        return { ...result, ...extendsOptions };
-      }, {})),
-      ...options,
-    };
+      return { ...result, ...extendsOptions };
+    }, {}));
+
+    options = defaultsDeep(newOptions, options)
   }
 
   // Set default options values if not defined yet
