---
import Thumbnail from '../Image/Image.astro';
import { parse, format } from 'date-fns';

export interface Props {
  item: any;
  index?: number;
}

const { item, index = 0 } = Astro.props;
const date = parse(item.datePublished, 'yyyyMMdd', new Date());

const linkProps = () => {
  if (item?.redirect || item?.astro?.url?.startsWith('http')) {
    return {
      href: item.redirect || item.astro?.url,
      target: '_blank',
      rel: 'noopener',
    };
  }

  return { href: item.url, ['data-swup-preload']: true };
};
---

<article>
  <a {...linkProps()} class="reset link">
    <figure class="media">
      <Thumbnail
        src={item.thumbnail}
        alt={item.title}
        class="image"
        tint={item.tint}
        loading={index > 0 ? 'lazy' : 'eager'}
        variants={[{ sizes: '(min-width: 800px) 58vw, (min-width: 1280px) 650px, 100vw', width: 1600, height: 900 }]}
      />
    </figure>
    <div class="content">
      <h2 class="title">
        {item.title}
      </h2>
      <p class="subtitle" set:html={item.subtitle || item.description}></p>
      <div class="meta">
        <time datetime={date}>{format(date, 'yyyy MM dd')}</time>
        {item.category && <div class="category">{item.category}</div>}
      </div>
    </div>
  </a>
</article>

<style>
  article {
    max-width: 100%;
    text-align: center;

    @media (min-width: 800px) {
      text-align: left;
    }
  }

  .media {
    position: relative;
    margin-bottom: 0;

    &::before {
      position: absolute;
      inset: 0;
      content: '';
      z-index: 1;
      display: block;
      /* stylelint-disable-next-line plugin/stylelint-no-indistinguishable-colors */
      background: linear-gradient(37.5deg, rgba(255, 255, 255, 0) 33%, rgba(255, 255, 255, 0.75) 100%);

      @media (prefers-color-scheme: dark) {
        /* stylelint-disable-next-line plugin/stylelint-no-indistinguishable-colors */
        background: linear-gradient(37.5deg, rgba(0, 0, 0, 0) 33%, rgba(0, 0, 0, 0.75) 100%);
      }
    }
  }

  .link {
    --link-color: var(--text-color);
    --link-hover-color: var(--text-color);
    --link-text-decoration: none;

    display: block;

    &:hover,
    &:focus {
      --stroke-inner-color: var(--text-color);
      --stroke-color: var(--text-color);
      --link-hover-background-color: transparent;
      --link-hover-color: inherit;
    }

    @media (min-width: 800px) {
      display: grid;
      grid-template-columns: 7fr 5fr;
      gap: calc(var(--grid-gap-x) / 1);
    }
  }

  .content {
    position: relative;
    z-index: 1;
    margin-block-start: calc(var(--space) / -1.5);
    padding: 0 calc(var(--space) / 2);

    @media (min-width: 800px) {
      margin-block-start: 0;
      padding: 0;
      display: flex;
      flex-direction: column;
      gap: calc(var(--grid-gap-y) / 4);
    }
  }

  .title {
    margin-block-end: calc(var(--space) / 3);
    line-height: var(--line-height-xs);
    font-size: var(--font-size-2xl);

    @media (min-width: 800px) {
      /* stylelint-disable-next-line scss/at-function-named-arguments */
      font-size: clamp(1rem, 7.5vw, var(--font-size-5xl));
      margin: calc(var(--grid-gap-y) * 0.5) 0 calc(var(--grid-gap-y) * 0.25) calc(var(--grid-gap-x) * -2);
      order: 1;
    }
  }

  .subtitle {
    font-weight: 400;
    order: 3;
    margin: 0 0 calc(var(--space) / 3);

    @media (min-width: 800px) {
      margin: 0;
    }
  }

  .meta {
    display: flex;
    gap: calc(var(--grid-gap-x) / 2);
    justify-content: center;
    font-size: var(--font-size-sm);
    font-weight: 500;
    color: var(--grey);

    @media (min-width: 800px) {
      justify-content: start;
      order: 2;
    }
  }

  .category {
    text-transform: uppercase;

    &::before {
      content: '#';
    }
  }
</style>
