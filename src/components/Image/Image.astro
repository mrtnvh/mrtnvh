---
import clsx from 'clsx';
import type { ClassValue } from 'clsx';
import { getImageVariants, ImageTint, ImageVariant } from './cloudinary';
import type { ColorKey } from '../../styles/colors';

export interface Props {
  src: string;
  alt: string;
  loading?: astroHTML.JSX.ImgHTMLAttributes['loading'];
  tint?: ImageTint | ColorKey | undefined;
  variants: ImageVariant[];
  className?: ClassValue;
  delimiter?: string;
}

const { alt, src: source, tint, loading, className, variants, delimiter } = Astro.props as Props;
const vrnts = variants.map(({ sizes, width, height, media }) => {
  const baseVariantOptions = { src: source, tint, width, height, delimiter };
  const { src, srcSet } = getImageVariants(baseVariantOptions);
  const { srcSet: srcSetAvif } = getImageVariants({ ...baseVariantOptions, type: 'avif' });
  const { srcSet: srcSetWebp } = getImageVariants({ ...baseVariantOptions, type: 'webp' });
  const { srcSet: srcSetDarkAvif } = getImageVariants({ ...baseVariantOptions, type: 'avif', dark: true });
  const { srcSet: srcSetDarkWebp } = getImageVariants({ ...baseVariantOptions, type: 'webp', dark: true });
  const { srcSet: srcSetDark } = getImageVariants({ ...baseVariantOptions, dark: true });

  return {
    src,
    srcSet,
    srcSetWebp,
    srcSetAvif,
    srcSetDarkAvif,
    srcSetDarkWebp,
    srcSetDark,
    sizes,
    width,
    height,
    media,
  };
});
---

<picture>
  {
    vrnts.map(
      (
        {
          src,
          srcSet,
          srcSetWebp,
          srcSetAvif,
          srcSetDarkAvif,
          srcSetDarkWebp,
          srcSetDark,
          sizes,
          width,
          height,
          media,
        },
        index,
      ) => {
        const darkMedia = media ? `${media} and (prefers-color-scheme: dark)` : `(prefers-color-scheme: dark)`;
        return (
          <>
            <source sizes={sizes} srcset={srcSetDarkAvif} type="image/avif" media={darkMedia} />
            <source sizes={sizes} srcset={srcSetDarkWebp} type="image/webp" media={darkMedia} />
            <source sizes={sizes} srcset={srcSetDark} media={darkMedia} />
            <source sizes={sizes} srcset={srcSetAvif} type="image/avif" media={media} />
            <source sizes={sizes} srcset={srcSetWebp} type="image/webp" media={media} />
            <source sizes={sizes} srcset={srcSet} media={media} />
            {index === vrnts.length - 1 && (
              <img
                class={clsx('image', className)}
                src={src}
                sizes={sizes}
                alt={alt}
                loading={loading}
                width={width}
                height={height}
                style={vrnts.length === 1 ? `aspect-ratio: ${width} / ${height}` : undefined}
              />
            )}
          </>
        );
      },
    )
  }
</picture>

<style>
  picture {
    display: flex;
    background-color: var(--grey-200);
  }

  img {
    width: 100%;
    height: auto;
    object-fit: cover;
  }
</style>
