---
import clsx from 'clsx';
import { getCountryFlagAndNameFromCode } from '../lib/useCountries';
import DateTime from './DateTime.astro';

export interface Event {
  title: string;
  url?: string;
  location: string;
  country: string;
  topic: string;
  startDate: string;
  endDate: string;
}

interface Props {
  class?: string;
  events: Event[];
  renderTopic?: boolean;
  renderHeader?: boolean;
}

const { events: eventsProp, renderTopic = false, renderHeader = false, class: className } = Astro.props;

const events = eventsProp.map((event) => {
  const { country, ...rest } = event;
  const { flag, name } = getCountryFlagAndNameFromCode(country);
  return { ...rest, country: { flag, name } };
});

function parseDate(date: string) {
  return new Date(Date.parse(date));
}
---

<div class={clsx(className, 'table-wrapper')}>
  <table class="table-layout-unset">
    <thead class={clsx({ 'sr-only': !renderHeader })}>
      <tr>
        <th scope="col">Event</th>
        <th scope="col">Topic</th>
        <th scope="col">Date</th>
        <th scope="col">Location</th>
        <th scope="col">
          <span class="sr-only">Country</span>
        </th>
      </tr>
    </thead>
    <tbody>
      {
        events.map((event) => (
          <tr>
            <td class="table-column-title">
              {event.url ? (
                <a href={event.url} target="_blank" rel="noopener">
                  {event.title}
                </a>
              ) : (
                event.title
              )}
            </td>
            {renderTopic && <td class="table-column-topic">{event.topic}</td>}
            <td class="table-column-date">
              <DateTime class="event-date" date={parseDate(event.startDate)} format={'date'} />
            </td>
            <td class="table-column-location">{event.location}</td>
            <td class="table-column-country">
              <span class="sr-only">{event.country.name}</span>
              <span aria-hidden="true">{event.country.flag}</span>
            </td>
          </tr>
        ))
      }
    </tbody>
  </table>
</div>

<style>
  .table-wrapper {
    container: events-table / inline-size;
  }

  .table-column-date {
    min-width: 12ch;
  }

  @container events-table (max-inline-size: 700px) {
    table,
    thead,
    tbody,
    th,
    td,
    tr {
      display: block;
      padding: 0;
      border: 0;
      line-height: 1;
    }

    tr {
      thead & {
        display: none;
      }

      tbody & {
        display: grid;
        grid-template-columns: 10ch min-content auto;
        grid-template-rows: auto auto auto;
        column-gap: 1em;
        row-gap: 0.5em;
        padding-block: 1.5em;
        border-bottom: 1px solid var(--table-border-color);

        &:first-child {
          border-top: 1px solid var(--table-border-color);
        }
      }
    }

    table :where(td, th) {
      &.table-column-title {
        grid-area: 1 / 1 / 1 / 4;
      }

      &.table-column-topic {
        grid-area: 2 / 1 / 2 / 4;
      }

      &.table-column-date {
        grid-area: 3 / 1 / 3 / 1;
      }

      &.table-column-location {
        grid-area: 3 / 2 / 3 / 2;
      }

      &.table-column-country {
        grid-area: 3 / 3 / 3 / 3;
      }
    }

    .event-date {
      display: inline-block;
    }
  }

  @container events-table (min-inline-size: 450px) and (max-inline-size: 700px) {
    table {
      border-block: 1px solid var(--table-border-color);
    }

    tbody {
      display: grid;
      grid-template-columns: 1fr 1fr;
      margin-block: -1px;
    }

    tr:nth-child(2) {
      border-top: 1px solid var(--table-border-color);
    }

    tr:nth-child(even) {
      padding-inline-start: var(--space);
    }

    tr:nth-child(odd) {
      border-right: 1px solid var(--table-border-color);
      padding-inline-end: var(--space);
    }
  }

  table :where(td, th):nth-child(3) {
    min-width: 9ch;
  }

  table :where(td, th):last-child {
    text-align: end;
    padding-inline-start: 0;
    width: 2ch;
  }

  .event-date {
    width: 100%;
    display: inline-block;
  }
</style>
