---
import Markdown from '@astrojs/markdown-component';
import { clsx } from 'clsx';
import BaseLayout from './Base.astro';
import { getImageVariants } from '../components/Image/cloudinary.js';
import Thumbnail from '../components/Image/Image.astro';
import events from '../events.json';
import EventsTable, { type Event } from '../components/EventsTable.astro';
import VisualPreview from '../components/VisualPreview.astro';

const {
  content: {
    title,
    thumbnail,
    thumbnailCredits,
    slides,
    slidesThumbnailAlt,
    demo,
    video,
    videoThumbnailAlt,
    tint,
    datePublished,
    category,
    id,
  },
} = Astro.props;

const defaultImageSettings = { src: thumbnail, tint };
const defaultMobileImageSettings = {
  ...defaultImageSettings,
  width: 1600,
  height: 1200,
  sizes: '100vw',
  media: '(max-width: 799px)',
};
const defaultDesktopImageSettings = {
  ...defaultImageSettings,
  width: 2100,
  height: 900,
  sizes: '(min-width: 1280px) 1280px, 100vw',
  media: '(min-width: 800px)',
};
const { srcSet: srcSetWebpMobile } = getImageVariants({
  ...defaultMobileImageSettings,
  type: 'webp',
});
const { srcSet: srcSetWebpDesktop } = getImageVariants({
  ...defaultDesktopImageSettings,
  type: 'webp',
});

// "...specifying preloading for multiple types of the same resource is discouraged.
// Instead, the best practice is to specify preloading only for the type the majority of your users are likely to actually use...
// https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types/preload#including_a_mime_type
const preloadProps = { rel: 'preload', as: 'image', type: 'image/webp' };
const preloads = [
  {
    ...preloadProps,
    imagesizes: defaultDesktopImageSettings.sizes,
    media: defaultDesktopImageSettings.media,
    imagesrcset: srcSetWebpDesktop,
  },
  {
    ...preloadProps,
    imagesizes: defaultMobileImageSettings.sizes,
    media: defaultMobileImageSettings.media,
    imagesrcset: srcSetWebpMobile,
  },
];

const transformedEvents = (events as unknown as Event[])
  .filter((event) => event.topic === id)
  .sort((a, b) => {
    const dateA = new Date(a.startDate);
    const dateB = new Date(b.startDate);
    return dateB.getTime() - dateA.getTime();
  });
---

<BaseLayout {...Astro.props} preloads={preloads}>
  <article>
    <div class="container">
      <figure class="hero">
        {
          thumbnail && (
            <Thumbnail
              src={thumbnail}
              alt={title}
              variants={[defaultDesktopImageSettings, defaultMobileImageSettings]}
              tint={tint}
            />
          )
        }
      </figure>
      <h1 class="title">{title}</h1>

      <div class="body long-form">
        <slot />
      </div>

      {
        (!!slides || !!video) && (
          <div class={clsx('media', { 'media-multiple': !!slides && !!video })}>
            <h2 class="sr-only">Media</h2>
            <div class="media-content">
              <figure>
                <VisualPreview url={video} alt={videoThumbnailAlt} src={video} />
                <figcaption>{videoThumbnailAlt}</figcaption>
              </figure>
              <figure>
                <VisualPreview url={slides} src={thumbnail} alt={slidesThumbnailAlt} />
                <figcaption>{slidesThumbnailAlt}</figcaption>
              </figure>
            </div>
          </div>
        )
      }

      {
        !!transformedEvents.length && (
          <div class="events">
            <h2>Events</h2>
            <p>I had the opportunity to share this topic at the upcoming or past events:</p>
            <EventsTable events={transformedEvents} />
          </div>
        )
      }

      {
        !!thumbnailCredits && (
          <div class="credits clear-inner-spacing">{thumbnailCredits && <Markdown set:html={thumbnailCredits} />}</div>
        )
      }
    </div>
  </article>
</BaseLayout>

<style>
  article {
    @media (max-width: 799px) {
      margin-block-start: calc(var(--grid-gap-y) * -2);
    }
  }

  .container {
    display: flex;
    flex-direction: column;
    gap: var(--grid-gap-x);

    @media (min-width: 800px) {
      display: grid;
      gap: var(--grid-gap-y) var(--grid-gap-x);
    }

    @media (min-width: 1280px) {
      grid-template-columns: 2fr 4fr 4fr 2fr;
      grid-template-rows: auto;
    }
  }

  .hero {
    grid-column: 1 / span 4;
    margin-inline: calc(var(--grid-gap-x) * -1);
    margin-block-end: 0;
    position: relative;

    &::before {
      position: absolute;
      inset: 0;
      content: '';
      z-index: 1;
      display: block;

      /* stylelint-disable-next-line plugin/stylelint-no-indistinguishable-colors */
      background: linear-gradient(180deg, rgba(255, 255, 255, 0) 85%, rgba(255, 255, 255, 0.5) 100%);

      @media (prefers-color-scheme: dark) {
        /* stylelint-disable-next-line plugin/stylelint-no-indistinguishable-colors */
        background: linear-gradient(180deg, rgba(0, 0, 0, 0) 85%, rgba(0, 0, 0, 0.5) 100%);
      }
    }

    picture {
      display: flex;
      background-color: var(--grey-200);
    }

    :global(img) {
      width: 100%;
      height: auto;
      object-fit: cover;
      aspect-ratio: 4 / 3;

      @supports not (aspect-ratio: 1 / 1) {
        &::before {
          float: left;
          padding-top: 75%;
          content: '';
        }

        &::after {
          display: block;
          content: '';
          clear: both;
        }
      }

      @media (min-width: 800px) {
        aspect-ratio: 21 / 9;

        @supports not (aspect-ratio: 1 / 1) {
          padding-top: 42.8571%;
        }
      }
    }
  }

  .title {
    font-size: var(--detail-title-size);
    font-weight: var(--detail-title-font-weight);
    line-height: var(--detail-title-line-height);
    margin-block-start: calc((var(--grid-gap-x) * -1) - 0.5625em);
    margin-block-end: 0;
    z-index: 1;

    @media (min-width: 800px) {
      margin-block-start: calc((var(--grid-gap-y) * -1) - 0.5625em);
    }
  }

  .title,
  .body,
  .media,
  .events,
  .credits {
    grid-column: 2 / span 2;
  }

  .media {
    margin-block-end: 0;

    &.media-multiple {
      grid-column: 1 / span 4;

      .media-content {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: var(--grid-gap-x);
      }
    }
  }

  .credits {
    font-size: var(--font-size-sm);
    color: var(--grey);
  }
</style>
