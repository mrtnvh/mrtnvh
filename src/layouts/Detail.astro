---
import { parse, format } from 'date-fns';
import BaseLayout from './Base.astro';
import { getSrcSet } from '../components/Image/cloudinary.js';

const {
  content: { title, subtitle, thumbnail, slides, demo, video, tint, datePublished, category },
} = Astro.props;

const defaultImageSettings = { src: thumbnail, tint };
const defaultMobileImageSettings = { ...defaultImageSettings, width: 1600, height: 1200 };
const defaultDesktopImageSettings = { ...defaultImageSettings, width: 2100, height: 900 };
const { src, srcSet: srcSetMobile } = getSrcSet({ ...defaultMobileImageSettings });
const { src: srcWebpMobile, srcSet: srcSetWebpMobile } = getSrcSet({ ...defaultMobileImageSettings, type: 'webp' });
const { src: srcDesktop, srcSet: srcSetDesktop } = getSrcSet({ ...defaultDesktopImageSettings });
const { src: srcWebpDesktop, srcSet: srcSetWebpDesktop } = getSrcSet({ ...defaultDesktopImageSettings, type: 'webp' });

const preloadMobileProps = { rel: 'preload', as: 'image', imagesizes: '100vw' };
const preloadDesktopProps = {
  rel: 'preload',
  as: 'image',
  imagesizes: '100vw, (min-width: 1280px) 1280px',
  media: '(min-width: 800px)',
};

const preloads = [
  { ...preloadDesktopProps, href: srcWebpDesktop, imagesrcset: srcSetWebpMobile, type: 'image/webp' },
  { ...preloadDesktopProps, href: srcDesktop, imagesrcset: srcSetDesktop },
  { ...preloadMobileProps, href: srcWebpMobile, imagesrcset: srcSetWebpMobile, type: 'image/webp' },
  { ...preloadMobileProps, href: src, imagesrcset: srcSetMobile },
];

const links = [
  ...(slides ? [{ title: 'Slides', url: slides }] : []),
  ...(demo ? [{ title: "Demo's", url: demo }] : []),
  ...(video ? [{ title: 'Video', url: video }] : []),
];

const date = parse(datePublished, 'yyyyMMdd', new Date());
---

<BaseLayout {...Astro.props} {preloads}>
  <article>
    <div class="container">
      <figure class="media">
        {thumbnail && (
          <picture>
            <source sizes="1px" srcset={srcSetWebpMobile} type="image/webp" />
            <source sizes="1px" srcset={srcSetDesktop} media="(min-width: 800px)" />
            <source sizes="1px" srcset={srcSetWebpDesktop} type="image/webp" media="(min-width: 800px)" />
            <img {src} srcset={srcSetMobile} sizes="1px" alt={title} class="image fade fade-inactive" />
          </picture>
        )}
      </figure>
      <h1 class="title">{title}</h1>
      <div class="meta">
        <div class="subtitle">{subtitle}</div>
        <div class="time-category">
          <time datetime={date}>{format(date, 'yyyy MM dd')}</time>
          {category && <div class="category">{category}</div>}
        </div>
        {!!links.length && (
          <div class="links">
            {links.map(({ title, url }) => (
              <a href={url} target="_blank" rel="noopener" class="external">
                {title}
              </a>
            ))}
          </div>
        )}
      </div>
      <div class="body">
        <slot />
      </div>
    </div>
  </article>
</BaseLayout>

<style>
  article {
    @media (max-width: 799px) {
      margin-block-start: calc(var(--grid-gap-y) * -2);
    }
  }

  .container {
    display: flex;
    flex-direction: column;

    @media (min-width: 800px) {
      display: grid;
      grid-template-columns: 4fr 8fr;
      gap: 0 var(--grid-gap-x);
      /* stylelint-disable-next-line declaration-block-no-redundant-longhand-properties */
      grid-template-areas:
        'media media'
        'title title'
        'meta body';
    }

    @media (min-width: 1280px) {
      grid-template-columns: 1fr 4fr 8fr 1fr;
      grid-template-areas:
        'media media media media'
        '. title title .'
        '. meta body .';
    }
  }

  .media {
    grid-area: media;
    margin-inline: calc(var(--grid-gap-x) * -1);
    margin-block-end: 0;
    position: relative;
    z-index: -1;

    picture {
      display: flex;
      background-color: var(--grey-200);
    }

    img {
      width: 100%;
      height: auto;
      object-fit: cover;
      aspect-ratio: 4 / 3;

      @media (min-width: 800px) {
        aspect-ratio: 21 / 9;
      }
    }
  }

  .title {
    grid-area: title;
    font-size: var(--detail-title-size);
    font-weight: var(--detail-title-font-weight);
    line-height: var(--detail-title-line-height);
    margin-block-start: -0.5625em;
  }

  .subtitle {
    font-weight: 700;

    @media (min-width: 800px) {
      font-size: var(--font-size-sm);
    }
  }

  .meta {
    grid-area: meta;
    display: flex;
    gap: 1rem;
    flex-direction: column;
    align-items: flex-start;
    margin-block-end: var(--grid-gap-x);
    color: var(--grey);

    a {
      color: var(--grey);

      &:hover,
      &:focus {
        color: var(--link-hover-color);
      }
    }

    @media (min-width: 800px) {
      font-size: var(--font-size-sm);
    }
  }

  .category {
    text-transform: uppercase;

    &::before {
      content: '#';
    }
  }

  .links,
  .time-category {
    display: flex;
    gap: 1rem;

    @media (min-width: 800px) {
      flex-direction: column;
      align-items: flex-start;
    }
  }

  .body {
    grid-area: body;
  }
</style>
